{"version":3,"sources":["components/Tracker/index.js","App.js","serviceWorker.js","index.js"],"names":["Tracker","props","bullets","i","startingAmmo","fired","state","clipSize","ammo","index","this","setState","push","length","pop","forEach","bullet","map","Checkbox","checked","onChange","handleChange","inputProps","indeterminate","Button","variant","color","onClick","dec","className","reload","inc","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAOqBA,G,wDACnB,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAGN,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAMG,aAAcD,IACtCD,EAAQC,GAAK,CAAEE,OAAO,GALP,OAQjB,EAAKC,MAAQ,CACXC,SAAUN,EAAMG,aAChBI,KAAM,GACNN,QAASA,GAXM,E,yDAeNO,GACX,IAAIP,EAAO,YAAOQ,KAAKJ,MAAMJ,SAC7BA,EAAQO,GAAOJ,OAASH,EAAQO,GAAOJ,MACvCK,KAAKC,SAAS,CAAET,c,4BAIhB,GAAIQ,KAAKJ,MAAMC,SAAW,GAAI,CAC5B,IAAIL,EAAO,YAAOQ,KAAKJ,MAAMJ,SAC7BA,EAAQU,KAAK,CAAEP,OAAO,IACtBK,KAAKC,SAAS,CAAET,QAASA,EAASK,SAAUL,EAAQW,Y,4BAKtD,GAAIH,KAAKJ,MAAMC,SAAW,EAAG,CAC3B,IAAIL,EAAO,YAAOQ,KAAKJ,MAAMJ,SAC7BA,EAAQY,MACRJ,KAAKC,SAAS,CAAET,QAASA,EAASK,SAAUL,EAAQW,Y,+BAMtD,IAAIX,EAAO,YAAOQ,KAAKJ,MAAMJ,SAC7BA,EAAQa,SAAQ,SAAAC,GACdA,EAAOX,OAAQ,KAEjBK,KAAKC,SAAS,CAAET,c,+BAGR,IAAD,OACCA,EAAYQ,KAAKJ,MAAjBJ,QAER,OACE,6BACGA,EAAQe,KAAK,SAACD,EAAQP,GAAT,OACZ,kBAACS,EAAA,EAAD,CACEC,QAASH,EAAOX,MAChBe,SAAU,kBAAM,EAAKC,aAAaZ,IAClCa,WAAY,CAAE,aAAc,oBAC5BC,eAAa,OAGjB,6BACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAM,EAAKC,QAAhE,KAGA,kBAACJ,EAAA,EAAD,CAAQK,UAAU,aAAaJ,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAM,EAAKG,WAAvF,UAGA,kBAACN,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAM,EAAKI,QAAhE,U,GAnE6BC,IAAMC,YC0B5BC,MA1Bf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAMhB,kBAAC,EAAD,CAASzB,aAAc,OCJX+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.638eda38.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport './index.sass';\n\n\nexport default class Tracker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let bullets = [];\n    for (let i = 0; i < props.startingAmmo; i++) {\n      bullets[i] = { fired: false }\n    }\n\n    this.state = { \n      clipSize: props.startingAmmo,\n      ammo: [],\n      bullets: bullets\n    };\n  }\n\n  handleChange(index) {\n    let bullets = [...this.state.bullets];\n    bullets[index].fired = !bullets[index].fired;\n    this.setState({ bullets }); \n  }\n\n  inc() {\n    if (this.state.clipSize < 20) {\n      let bullets = [...this.state.bullets];\n      bullets.push({ fired: false });\n      this.setState({ bullets: bullets, clipSize: bullets.length }); \n    }\n  }\n\n  dec() {\n    if (this.state.clipSize > 1) {\n      let bullets = [...this.state.bullets];\n      bullets.pop();\n      this.setState({ bullets: bullets, clipSize: bullets.length }); \n\n    }\n  }\n\n  reload() {\n    let bullets = [...this.state.bullets];\n    bullets.forEach(bullet => {\n      bullet.fired = false;\n    });\n    this.setState({ bullets }); \n  }\n\n  render() {\n    const { bullets } = this.state;\n    \n    return (\n      <div>\n        {bullets.map( (bullet, index) => (\n          <Checkbox\n            checked={bullet.fired}\n            onChange={() => this.handleChange(index)}\n            inputProps={{ 'aria-label': 'primary checkbox' }}\n            indeterminate\n          />\n        ))}\n        <br/>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.dec()}>\n          -\n        </Button>\n        <Button className=\"reload-btn\" variant=\"contained\" color=\"primary\" onClick={() => this.reload()}>\n          Reload\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.inc()}>\n          +\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Tracker from './components/Tracker';\n// import Timer from './components/Timer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        {/* <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n\n        <Tracker startingAmmo={6} />\n\n        {/* <Timer /> */}\n\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}